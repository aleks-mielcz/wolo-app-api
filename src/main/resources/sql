-- Table: address
CREATE TABLE address (
                         id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
                         street VARCHAR(50) NOT NULL,
                         home_num VARCHAR(10) NOT NULL,
                         district_id BIGINT NOT NULL,
                         description VARCHAR(250) NOT NULL
);

-- Table: address_to_event
CREATE TABLE address_to_event (
                                  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
                                  event_id BIGINT NOT NULL,
                                  address_id BIGINT NOT NULL
);

-- Table: category
CREATE TABLE category (
                          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
                          "name" VARCHAR(50) NOT NULL
);

-- Table: district
CREATE TABLE district (
                          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
                          "name" VARCHAR(50) NOT NULL,
                          city VARCHAR(50) NOT NULL
);

-- Table: event
CREATE TABLE event (
                       id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
                       "name" VARCHAR(250) NOT NULL,
                       description TEXT NOT NULL,
                       category_id BIGINT,
                       is_pesel_ver_req BOOLEAN NOT NULL,
                       is_agreement_needed BOOLEAN NOT NULL,
                       organisation_id BIGINT NOT NULL
);

-- Table: organisation
CREATE TABLE organisation (
                              id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
                              "name" VARCHAR(250) NOT NULL,
                              description TEXT NOT NULL,
                              email VARCHAR(50) NOT NULL,
                              phone_num VARCHAR(9) NOT NULL,
                              address_id BIGINT NOT NULL,
                              is_approved BOOLEAN NOT NULL,
                              moderator_id BIGINT NOT NULL
);

-- Table: role
CREATE TABLE role (
                      id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
                      "name" VARCHAR(20) NOT NULL
);

-- Table: shift
CREATE TABLE shift (
                       id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
                       address_to_event_id BIGINT NOT NULL,
                       start_time TIME NOT NULL,
                       end_time TIME NOT NULL,
                       "date" DATE NOT NULL,
                       capacity INT NOT NULL,
                       is_leader_required BOOLEAN NOT NULL,
                       required_min_age INT NOT NULL
);

-- Table: shift_to_user
CREATE TABLE shift_to_user (
                               id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
                               user_id BIGINT NOT NULL,
                               shift_id BIGINT NOT NULL,
                               is_on_reserve_list BOOLEAN NOT NULL,
                               is_leader BOOLEAN NOT NULL
);

-- Table: user
CREATE TABLE "user" (
                        id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
                        firstname VARCHAR(50) NOT NULL,
                        lastname VARCHAR(50) NOT NULL,
                        email VARCHAR(50) NOT NULL,
                        phone_number VARCHAR(9) NOT NULL,
                        role_id BIGINT NOT NULL,
                        is_pesel_verified BOOLEAN NOT NULL,
                        is_agreement_signed BOOLEAN NOT NULL,
                        is_adult BOOLEAN NOT NULL
);

CREATE UNIQUE INDEX idx_unique_email ON "user" (email);

-- foreign keys
-- Tabela: address
ALTER TABLE address
    ADD CONSTRAINT fk_address_district_id
        FOREIGN KEY (district_id)
            REFERENCES district (id);

-- Tabela: address_to_event
ALTER TABLE address_to_event
    ADD CONSTRAINT fk_address_to_event_event_id
        FOREIGN KEY (event_id)
            REFERENCES event (id),
    ADD CONSTRAINT fk_address_to_event_address_id
        FOREIGN KEY (address_id)
            REFERENCES address (id);

-- Tabela: event
ALTER TABLE event
    ADD CONSTRAINT fk_event_category_id
        FOREIGN KEY (category_id)
            REFERENCES category (id),
    ADD CONSTRAINT fk_event_organisation_id
        FOREIGN KEY (organisation_id)
            REFERENCES organisation (id);

-- Tabela: organisation
ALTER TABLE organisation
    ADD CONSTRAINT fk_organisation_address_id
        FOREIGN KEY (address_id)
            REFERENCES address (id)
            ON DELETE CASCADE,
    ADD CONSTRAINT fk_organisation_moderator_id
        FOREIGN KEY (moderator_id)
            REFERENCES "user" (id);


-- Tabela: shift
ALTER TABLE shift
    ADD CONSTRAINT fk_shift_address_to_event_id
        FOREIGN KEY (address_to_event_id)
            REFERENCES address_to_event (id);


-- Tabela: shift_to_user
ALTER TABLE shift_to_user
    ADD CONSTRAINT fk_shift_to_user_user_id
        FOREIGN KEY (user_id)
            REFERENCES "user" (id),
    ADD CONSTRAINT fk_shift_to_user_shift_id
        FOREIGN KEY (shift_id)
            REFERENCES shift (id);

-- Tabela: user
ALTER TABLE "user"
    ADD CONSTRAINT fk_user_role_id
        FOREIGN KEY (role_id)
            REFERENCES role (id);



CREATE OR REPLACE FUNCTION update_event_after_category_delete()
    RETURNS TRIGGER AS $$
BEGIN
    UPDATE event
    SET category_id = (SELECT id FROM category WHERE "name" = 'Podstawowa')
    WHERE category_id = OLD.id;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_event_after_category_delete
    AFTER DELETE ON category
    FOR EACH ROW
EXECUTE FUNCTION update_event_after_category_delete();


INSERT INTO role ("name")
VALUES ( 'Administrator'),
       ( 'Lider'),
       ( 'Użytkownik');

INSERT INTO district ( "name", city)
VALUES ('Centrum', 'Warszawa'),
       ( 'Wrzeszcz', 'Gdańsk'),
       ( 'Śródmieście', 'Gdańsk');

INSERT INTO category ( "name")
VALUES ( 'Sport'),
       ( 'Pomoc'),
       ( 'Edukacja'),
       ( 'Podstawowa');

INSERT INTO address ( street, home_num, district_id, description)
VALUES ( 'ul. Kwiatowa', '10A', 2, 'Wejście ze strony parku'),
       ( 'ul. Słoneczna', '5', 1, 'Biuro PJATK'),
       ( 'ul. Parkowa', '7', 3, 'Wejście przez zieloną brame, na domofonie #31');

INSERT INTO "user" ( firstname, lastname, email, phone_number, role_id, is_pesel_verified, is_agreement_signed, is_adult)
VALUES ( 'Jan', 'Kowalski', 'jan.kowalski@example.com', '123456789', 3, true, true, true),
       ( 'Anna', 'Nowak', 'anna.nowak@example.com', '987654321', 3, false, true, true),
       ( 'Piotr', 'Wójcik', 'piotr.wojcik@example.com', '456789123', 2, true, false,false);

INSERT INTO organisation ( "name", description, email, phone_num, address_id, is_approved, moderator_id)
VALUES ( 'Pomorska Fundacja Bracia Mniejsi', 'Pomagamy zwierzakam).', 'info@sprintclub.com', '123456789', 1, true, 1),
       ( 'Centrum Wolontariatu w Gdańsku', 'Regionalne Centrum Wolontariatu w Gdańsku powstało w 1994r. Od 2001 roku jesteśmy samodzielnym stowarzyszeniem działającym w ramach ogólnopolskiej Federacji Centrów Wolontariatu', 'info@nowehoryzontygallery.com', '987654321', 2, true, 2),
       ( 'Akademia Programowania "Koduj z Nami"', 'Akademia oferująca kursy programowania dla osób w każdym wieku.', 'info@kodujznami.com', '456789123', 3, true, 1);

INSERT INTO event ( "name", description, category_id, is_pesel_ver_req, is_agreement_needed, organisation_id)
VALUES ( 'Bieg Maratoński', ' Pieski spędzające cały dzień na kanapie się nudzą
Dlatego poszukujemy wolontariuszy, do spacerów z dużymi psami, które mieszkają w Leźnie i są pod opieką naszej Fundacji.
', 1, false, false, 1),
       ( 'Festyn dla dzieci na Rudnikach', 'Poszukujemy wolontariuszy do pomocy przy organizacji festynu dla dzieci.
Festyn obędzie się 10 czerwca 2023  na Rudnikach.', 2, true, true, 3),
       ( 'Warsztaty Programowania', 'Już w czerwce o 10:00 pod Fontanną Neptuna w Gdańsku wystartuje Parada Seniorów 2023!
O godzinie 10:00 rozpocznie się część oficjalna z przemówieniami.
', 3, true, true, 2);


INSERT INTO address_to_event ( event_id, address_id)
VALUES ( 1, 1),
       ( 2, 2),
       ( 3, 3);

INSERT INTO shift ( address_to_event_id, start_time, end_time, date, capacity, is_leader_required, required_min_age)
VALUES ( 1, '09:00:00', '12:00:00', '2023-06-10', 20, true, 18),
       ( 2, '14:00:00', '18:00:00', '2023-06-12', 15, false, 16),
       ( 3, '10:30:00', '13:30:00', '2023-06-15', 10, true, 18);

INSERT INTO shift_to_user ( user_id, shift_id, is_on_reserve_list, is_leader)
VALUES ( 1, 4, false, true),
       ( 2, 5, false, false),
       ( 3, 6, true, false);